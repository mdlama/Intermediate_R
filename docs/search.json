[
  {
    "objectID": "Intermediate_R.html#chap.-1-conditionals-and-control-flow",
    "href": "Intermediate_R.html#chap.-1-conditionals-and-control-flow",
    "title": "Intermediate R",
    "section": "Chap. 1: Conditionals and control flow",
    "text": "Chap. 1: Conditionals and control flow\nTo be TRUE or not be TRUE, that’s the question. In this chapter you’ll learn about relational operators to see how R objects compare and logical operators to combine logicals. Next, you’ll use this knowledge to build conditional statements.\n\nEquality and inequality\nThe most basic form of comparison is equality, denoted by “double equals”, or ==. Note the difference here between == and =:\n\nA single equal = is equivalent to the assignment operator &lt;-.\nA double equal == denotes a comparison.\n\nWhen you see the expression a == b, think “Is a equal to b?” The answer will be a Boolean - either TRUE (yes) or FALSE (no).\nAn inequality comparison is denoted by !=. If you see the expression a != b, read it as “Is a not equal to b?” The answer, as with the equality comparison, is a Boolean.\nHere are some examples comparing different data types for equality and inequality:\n\nData type: Boolean\n\nTRUE == TRUE\n\n[1] TRUE\n\nTRUE != TRUE\n\n[1] FALSE\n\n\n\nTRUE == FALSE\n\n[1] FALSE\n\nTRUE != FALSE\n\n[1] TRUE\n\n\n\n\nData type: String\n\n\"hello\" == \"goodbye\"\n\n[1] FALSE\n\n\"hello\" != \"goodbye\"\n\n[1] TRUE\n\n\n\n\nData type: Numeric\n\n3 == 2\n\n[1] FALSE\n\n3 != 2\n\n[1] TRUE\n\n\nThe following statements all evaluate to TRUE (feel free to run the code).\n\n\n\n\n\n\n\n\nNotice from the last expression that R is case sensitive: “R” is not equal to “r”. Keep this in mind when solving the exercises in this chapter!\n\n\n\n\n\n\nExercise 1: Comparison of logicals\n\n\n\nWrite R code to see if TRUE equals FALSE.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\n\nTRUE == FALSE\nTRUE == FALSE\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nExercise 2: Comparison of numerics\n\n\n\nCheck if -6 * 14 is not equal to 17 - 101.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\n\n-6 * 14 != 17 - 101\n-6 * 14 != 17 - 101\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nExercise 3: Comparison of character strings\n\n\n\nCompare character strings by asking R whether the strings \"useR\" and \"user\" are equal.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\n\n\"useR\" == \"user\"\n\"useR\" == \"user\"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nExercise 4: Compare a logical with a numeric\n\n\n\nFind out what happens if you compare logicals to numerics: are TRUE and 1 equal?\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\n\nTRUE == 1\nTRUE == 1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGreater and less than\nApart from equality operators, we also introduce the less than and greater than operators: &lt; and &gt;. You can also add an equal sign to express less than or equal to or greater than or equal to, respectively. As with the equality and inequality operators, the result is a Boolean.\nHere are some examples:\n\n3 &lt; 5\n\n[1] TRUE\n\n3 &gt; 5\n\n[1] FALSE\n\n5 &gt;= 3\n\n[1] TRUE\n\n3 &gt;= 3\n\n[1] TRUE\n\n\nWhen comparing strings, alphabetical ordering is enforced!\n\n\"Hello\" &gt; \"Goodbye\"\n\n[1] TRUE\n\n\nIn the case of Booleans, TRUE is understood as 1, while FALSE is coerced to 0.\n\nTRUE &lt; FALSE\n\n[1] FALSE\n\n\nHave a look at the following R expressions, that all evaluate to FALSE (feel free to change them to see what happens):\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nExercise 1: Comparison of numerics\n\n\n\nWrite R code to check whether -6 * 5 + 2 is greater than or equal to -10 + 1.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\n\n-6 * 5 + 2 &gt;= -10 + 1\n-6 * 5 + 2 &gt;= -10 + 1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nExercise 2: Comparison of character strings\n\n\n\nWrite R code to check whether \"raining\" is less than or equal to \"raining dogs\".\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\n\n\"raining\" &lt;= \"raining dogs\"\n\"raining\" &lt;= \"raining dogs\"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nExercise 3: Comparison of logicals\n\n\n\nWrite R code to check whether TRUE is greater than FALSE. Before you run the code, take an educated guess at the answer!\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\n\nTRUE &gt; FALSE\nTRUE &gt; FALSE\n\n\n\n\n\n\n\n\n\n\n\n\n\nCompare vectors\nYou are already aware that R is very good with vectors. Without having to change anything about the syntax, R’s relational operators also work on vectors.\nTo illustrate, suppose you want to figure out whether your activity on social media platforms have paid off and decide to look at your results for LinkedIn and Facebook. The code below initializes the vectors linkedin and facebook. Each of the vectors contains the number of profile views your LinkedIn and Facebook profiles had over the last seven days.\n\nlinkedin &lt;- c(16, 9, 13, 5, 2, 17, 14)\nfacebook &lt;- c(17, 7, 5, 16, 8, 13, 14)\n\nFirst, let’s print the linkedin vector, then on the next line see when your LinkedIn activity was greater than 10.\n\nlinkedin\n\n[1] 16  9 13  5  2 17 14\n\nlinkedin &gt; 10\n\n[1]  TRUE FALSE  TRUE FALSE FALSE  TRUE  TRUE\n\n\nNotice that the resulting comparison vector is a Boolean vector of the same length. The indices or positions that are TRUE denote days when your LinkedIn activity was greater than 10. The comparison operators will perform the comparison element-by-element.\nIf two vectors are of the same length, you can also compare a vector to another vector. This allows us to ask a question like “On what days was my LinkedIn activity greater than or equal to my Facebook activity?” Here’s the code for that comparison:\n\nfacebook &lt;= linkedin\n\n[1] FALSE  TRUE  TRUE FALSE FALSE  TRUE  TRUE\n\n\nAgain, you get a Boolean vector of the same length as the two vectors such that the ith value of the resulting vector is equal to facebook[i] &lt;= linkedin[i].\nFor the following exercises, the vectors linkedin and facebook will be already initialized and available in memory.\n\n\n\n\n\n\nExercise 1: Popular days\n\n\n\nUsing relational operators, find a logical answer, i.e. TRUE or FALSE, for the following question: On which days did the number of LinkedIn profile views exceed 15?\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\n\nlinkedin &gt; 15\nlinkedin &gt; 15\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nExercise 2: Quiet days\n\n\n\nUsing relational operators, find a logical answer, i.e. TRUE or FALSE, for the following question: When was your LinkedIn profile viewed only 5 times or fewer?\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\n\nlinkedin &lt;= 5\nlinkedin &lt;= 5\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nExercise 3: LinkedIn more popular than Facebook\n\n\n\nUsing relational operators, find a logical answer, i.e. TRUE or FALSE, for the following question: When was your LinkedIn profile visited more often than your Facebook profile?\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\n\nlinkedin &gt; facebook\nlinkedin &gt; facebook\n\n\n\n\n\n\n\n\n\n\n\n\n\nCompare matrices\nR’s ability to deal with different data structures for comparisons does not stop at vectors. Matrices and relational operators also work together seamlessly!\nInstead of in vectors (as in the previous exercise), the LinkedIn and Facebook data is now stored in a matrix called views. The first row contains the LinkedIn information; the second row the Facebook information. The original vectors facebook and linkedin are still available as well.\n\n# The social data has been created for you\nlinkedin &lt;- c(16, 9, 13, 5, 2, 17, 14)\nfacebook &lt;- c(17, 7, 5, 16, 8, 13, 14)\nviews &lt;- matrix(c(linkedin, facebook), nrow = 2, byrow = TRUE)\nviews\n\n     [,1] [,2] [,3] [,4] [,5] [,6] [,7]\n[1,]   16    9   13    5    2   17   14\n[2,]   17    7    5   16    8   13   14\n\n\n\n\n\n\n\n\nExercise 1: When does views equal 13?\n\n\n\nUsing the relational operators you’ve learned so far, try to discover the following: When were the views exactly equal to 13? Use the views matrix to return a logical matrix.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\n\nviews == 13\nviews == 13\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nExercise 2: When is views less than or equal to 14?\n\n\n\nUsing the relational operators you’ve learned so far, try to discover the following: For which days were the number of views less than or equal to 14? Again, have R return a logical matrix.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\n\nviews &lt;= 14\nviews &lt;= 14\n\n\n\n\n\n\n\n\n\n\n\n\n\nLogical Operators: AND (&), OR (|) and NOT (!)\nWhereas relational operators (&lt;, &gt;, &lt;=, &gt;=, ==, !=) compare two data types and return a Boolean, logical operators (such as AND, OR, and NOT) take two Booleans and return another Boolean. The notation in R for these logical operators are:\n\n& is the AND operator\n| is the OR operator\n! is the NOT operator\n\nYou already saw the ! notation with !=, which is read “not equals”.\nThe logical rules for these operators are:\nA AND B is TRUE if and only if A is TRUE and B is TRUE. Otherwise, A AND B is FALSE.\n\nTRUE & TRUE\n\n[1] TRUE\n\nTRUE & FALSE\n\n[1] FALSE\n\nFALSE & TRUE\n\n[1] FALSE\n\nFALSE & FALSE\n\n[1] FALSE\n\n\nA OR B is TRUE if and only if either A is TRUE or B is TRUE. Otherwise, A OR B is FALSE\n\nTRUE | TRUE\n\n[1] TRUE\n\nTRUE | FALSE\n\n[1] TRUE\n\nFALSE | TRUE\n\n[1] TRUE\n\nFALSE | FALSE\n\n[1] FALSE\n\n\nNOT FALSE is TRUE and NOT TRUE is FALSE, i.e. the NOT operator simply results in the opposite.\n\n!FALSE\n\n[1] TRUE\n\n!TRUE\n\n[1] FALSE\n\n\nYou can combine these logical operators with the relational operators to make more complicated expressions.\n\nx &lt;- 12\nx &gt; 5 & x &lt; 15 # Is x in interval (5, 15)?\n\n[1] TRUE\n\nx &lt;- 17\nx &gt; 5 & x &lt; 15\n\n[1] FALSE\n\ny &lt;- 4\ny &lt; 5 | y &gt; 15 # Is y in intervals (-Inf, 5) or (15, Inf)?\n\n[1] TRUE\n\ny &lt;- 14\ny &lt; 5 | y &gt; 15\n\n[1] FALSE\n\n\nNote that all these expressions are equivalent:\n\nx &lt;- 12\n\n!(x &gt; 5 & x &lt; 15)\n\n[1] FALSE\n\n!(x &gt; 5) | !(x &lt; 15)\n\n[1] FALSE\n\nx &lt;= 5 | x &gt;= 15\n\n[1] FALSE\n\n\nBefore you work your way through the next exercises, have a look at the following R expressions. All of them will evaluate to TRUE:\n\nTRUE & TRUE\n\n[1] TRUE\n\nFALSE | TRUE\n\n[1] TRUE\n\n5 &lt;= 5 & 2 &lt; 3\n\n[1] TRUE\n\n3 &lt; 4 | 7 &lt; 6\n\n[1] TRUE\n\n\nWatch out: 3 &lt; x &lt; 7 to check if x is between 3 and 7 will not work; you’ll need 3 &lt; x & x &lt; 7 for that.\nIn this exercise, you’ll be working with the last variable. This variable equals the last value of the linkedin vector that you’ve worked with previously. The linkedin vector represents the number of LinkedIn views your profile had in the last seven days, remember? Both the variables linkedin and last have already been defined in the editor.\n\n# The linkedin and last variable are already defined for you\nlinkedin &lt;- c(16, 9, 13, 5, 2, 17, 14)\nlast &lt;- tail(linkedin, 1)\n\n\n\n\n\n\n\nExercise 1: Is last under 5 or above 10?\n\n\n\nWrite R code to determine if last is under 5 or above 10.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\n\nlast &lt; 5 | last &gt; 10\nlast &lt; 5 | last &gt; 10\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nExercise 2: Is last between 15 (exclusive) and 20 (inclusive)?\n\n\n\nWrite R code to determine if last is between 15 and 20 (excluding 15 but including 20).\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\n\nlast &gt; 15 & last &lt;= 20\nlast &gt; 15 & last &lt;= 20\n\n\n\n\n\n\n\n\n\n\n\n\n\nLogical Operators: Vectorized!\nLike relational operators, logical operators work perfectly fine with vectors and matrices. The &, |, and ! operators work on vectors and matrices “element-wise”. For example, if A and B are vectors and C == A & B, then C[i] == A[i] & B[i]. What do you think you would get from the following? Take an educated guess before running the code!\n\nc(TRUE, TRUE, FALSE) & c(TRUE, FALSE, FALSE)\n\n[1]  TRUE FALSE FALSE\n\nc(TRUE, TRUE, FALSE) | c(TRUE, FALSE, FALSE)\n\n[1]  TRUE  TRUE FALSE\n\n!c(TRUE, TRUE, FALSE)\n\n[1] FALSE FALSE  TRUE\n\n\nBoth the vectors linkedin and facebook are available again. Also a matrix - views - has been defined; its first and second row correspond to the linkedin and facebook vectors, respectively. Ready for some advanced queries to gain more insights into your social outreach?\n\n# The social data (linkedin, facebook, views) has been created for you\nlinkedin &lt;- c(16, 9, 13, 5, 2, 17, 14)\nfacebook &lt;- c(17, 7, 5, 16, 8, 13, 14)\nviews &lt;- matrix(c(linkedin, facebook), nrow = 2, byrow = TRUE)\n\n\n\n\n\n\n\nExercise 1: linkedin exceeds 10 but facebook below 10\n\n\n\nWhen did LinkedIn views exceed 10 and did Facebook views fail to reach 10 for a particular day? Use the linkedin and facebook vectors.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\n\nlinkedin &gt; 10 & facebook &lt; 10\nlinkedin &gt; 10 & facebook &lt; 10\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nExercise 2: When were one or both visited at least 12 times?\n\n\n\nWhen were one or both of your LinkedIn and Facebook profiles visited at least 12 times?\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\n\nlinkedin &gt;= 12 | facebook &gt;= 12\nlinkedin &gt;= 12 | facebook &gt;= 12\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nExercise 3: When is views between 11 (exclusive) and 14 (inclusive)?\n\n\n\nWhen is the views matrix equal to a number between 11 and 14, excluding 11 and including 14?\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\n\nviews &gt; 11 & views &lt;= 14\nviews &gt; 11 & views &lt;= 14\n\n\n\n\n\n\n\n\n\n\n\n\n\nReverse the result: !\nOn top of the & and | operators, you also learned about the ! operator, which negates a logical value. To refresh your memory, here are some R expressions that use !. They all evaluate to FALSE:\n\n!TRUE\n\n[1] FALSE\n\n!(5 &gt; 3)\n\n[1] FALSE\n\n!!FALSE\n\n[1] FALSE\n\n\n\n\n\n\n\n\nQuestion\n\n\n\nWhat would the following set of R expressions return?\n\nx &lt;- 5\ny &lt;- 7\n!(!(x &lt; 4) & !!!(y &gt; 12))\n\n\n\n\n\nTRUE\n\n\nFALSE\n\n\nRunning this piece of code would throw an error.\n\n\n\n\n\n\n\n\n\n\n\nBlend it all together\nWith the things you’ve learned by now, you’re able to solve pretty cool problems.\nInstead of recording the number of views for your own LinkedIn profile, suppose you conducted a survey inside the company you’re working for. You’ve asked every employee with a LinkedIn profile how many visits their profile has had over the past seven days. You stored the results in a data frame called li_df. This data frame is available in the workspace; type li_df in the console to check it out.\n\n\n\n\n\n\nExercise 1: Pulling out a column\n\n\n\nSelect the entire second column, named day2, from the li_df data frame as a vector and assign it to a new variable second.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\n\nsecond &lt;- li_df[, 2]\nsecond &lt;- li_df[, 2]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nExercise 2: Create boolean vector of extremes\n\n\n\nUse second to create a logical vector, that contains TRUE if the corresponding number of views is strictly greater than 25 or strictly lower than 5 and FALSE otherwise. Store this logical vector as extremes.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\n\nextremes &lt;- second &gt; 25 | second &lt; 5\nextremes &lt;- second &gt; 25 | second &lt; 5\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nExercise 3: Count the number of TRUEs in extremes\n\n\n\nUse sum() on the extremes vector to calculate the number of TRUEs in extremes (i.e. to calculate the number of employees that are either very popular or very low-profile). Simply print this number to the console.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\n\nsum(extremes)\nsum(extremes)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nChallenge: Solve it with a one-liner\n\n\n\nWrite one line of R code that performs all of Exercises 1-3.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\n\nsum(li_df[, 2] &gt; 25 | li_df[, 2] &lt; 5)\nsum(li_df[, 2] &gt; 25 | li_df[, 2] &lt; 5)\n\n\n\n\n\n\n\n\n\n\n\n\n\nConditional statements: The if statement\nSometimes you have some code that should only be run if a certain condition is met. An if statement achieves this, with its syntax in R given by:\n\nif (condition) {\n  # Conditional code that runs only if condition is TRUE\n}\n\nRun the following code, then change the value of x so that the conditional code does not run.\n\n\n\n\n\n\n\n\nRemember your vectors with social profile views? Let’s look at it from another angle. The medium variable gives information about the social website; the num_views variable denotes the actual number of views that particular medium had on the last day of your recordings. Both these variables have already been defined in the editor.\n\n# Variables related to your last day of recordings\nmedium &lt;- \"LinkedIn\"\nnum_views &lt;- 14\n\nRun the following code with the if statement that prints out “Showing LinkedIn information” if the medium variable equals “LinkedIn”.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nExercise 1: Write the if statement for num_views\n\n\n\nCode an if statement that prints “You’re popular!” to the console if the num_views variable exceeds 15.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\n\nif (num_views &gt; 15) {\n  print(\"You're popular!\")\n}\nif (num_views &gt; 15) {\n  print(\"You're popular!\")\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdd an else\nYou can only use an else statement in combination with an if statement. The else statement does not require a condition; its corresponding code is simply run if all of the preceding conditions in the control structure are FALSE. Let’s look at the previous example again that printed out x is a negative number when x was negative:\n\nx &lt;- -3\nif (x &lt; 0) {\n  print(\"x is a negative number\")\n}\n\n[1] \"x is a negative number\"\n\n\nWhen x is non-negative, nothing gets printed. Wouldn’t it be better to print something in this case? This is where the else statement comes into play. Here is its syntax:\n\nif (condition) {\n  # Run this code if condition is TRUE\n} else {\n  # Run this code if condition is FALSE\n}\n\nNow we have another piece of code that gets run only when condition is FALSE! Here’s the example above with relavent information printed when x is non-negative. Run the code, then change the value of x so that the code in the else block is run.\n\n\n\n\n\n\n\n\nIt’s important that the else keyword comes on the same line as the closing bracket of the if part!\nIn the next exercises, both if statements that you coded in previous exercises will be available in the editor. It’s now up to you to extend them with the appropriate else statements!\nWe’ll start with the same setup as before:\n\n# Variables related to your last day of recordings\nmedium &lt;- \"LinkedIn\"\nnum_views &lt;- 14\n\n\n\n\n\n\n\nExercise 1: Control structure for medium\n\n\n\nAdd an else statement such that “Unknown medium” gets printed out to the console when the if-condition on medium does not hold.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\n\nif (medium == \"LinkedIn\") {\n  print(\"Showing LinkedIn information\")\n} else {\n  print(\"Unknown medium\")\n}\nif (medium == \"LinkedIn\") {\n  print(\"Showing LinkedIn information\")\n} else {\n  print(\"Unknown medium\")\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nExercise 2: Control structure for num_views\n\n\n\nAdd an else statement such that R prints out “Try to be more visible!” when the if-condition on num_views is not met.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\n\nif (num_views &gt; 15) {\n  print(\"You're popular!\")\n} else {\n  print(\"Try to be more visible!\")\n}\nif (num_views &gt; 15) {\n  print(\"You're popular!\")\n} else {\n  print(\"Try to be more visible!\")\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\nCustomize further: else if\nThe else if statement allows you to further customize your control structure. You can add as many else if statements as you like. Keep in mind that R ignores the remainder of the control structure once a condition has been found that is TRUE and the corresponding expressions have been executed. Here’s an overview of the syntax:\n\nif (condition1) {\n  # Run this code if condition1 is TRUE\n} else if (condition2) {\n  # Run this code if condition1 is FALSE and condition2 is TRUE\n} else if (condition3) {\n  # Run this code if both condition1 and condition2 are FALSE but condition3 is TRUE\n} else {\n  # Run this code otherwise, i.e. all of the above conditions are FALSE\n}\n\nUsing our previous example checking the values of x, what if we wanted to separate out the case when x was zero? This is an example where the else if statement can be helpful. Here’s the example - as before, run it and change the value of x so that each case occurs (i.e. x is positive, zero, and negative). Note: You may get an error that says “unexpected symbol ‘if’” - this is a bug! Please ignore it.\n\n\n\n\n\n\n\n\nIt’s important that the else if keywords comes on the same line as the closing bracket of the previous part of the control construct!\nLet’s do one more example before jumping into some exercises. This example introduces you to the %% operator, which is called the modulo or remainder operator. Remember your fractions? Here’s a quick refresher: \\[\n\\frac{5}{3} = 1 \\ \\textrm{with remainder} \\ 2 \\ = 1\\frac{2}{3}\n\\] The modulo, or remainder, operator %% gives us the remainder after division! Run the code below illustrating the example above - feel free to try other numbers!\n\n5 %% 3\n\n[1] 2\n\n\nNote that you can use the modulo operator to test if a number is divisible by another number. If a number x is divisible by another number y, then the remainder will be 0. Change the two numbers in the code editor below so that the remainder is zero.\n\n\n\n\n\n\n\n\n\n\n# This is one of infinitely many possible solutions\n6 %% 3\n# This is one of infinitely many possible solutions\n6 %% 3\n\n\n\n\n\nHere is one more example showing combining the modulo operator with a if/else if/else code block. Again, feel free to change x to see how the results changes.\n\n\n\n\n\n\n\n\nTime for some more exercises! We start again with the following variables pre-defined:\n\n# Variables related to your last day of recordings\nmedium &lt;- \"LinkedIn\"\nnum_views &lt;- 14\n\n\n\n\n\n\n\nExercise 1: Control structure for medium\n\n\n\nAdd code to both control structures such that R prints out “Showing Facebook information” if medium is equal to “Facebook”. Remember that R is case sensitive! Feel free to change the variable medium to see how the control structure responds. The existing code should be extended in the else if statement. No existing code should be modified.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\n\nif (medium == \"LinkedIn\") {\n  print(\"Showing LinkedIn information\")\n} else if (medium == \"Facebook\") {\n  print(\"Showing Facebook information\")\n} else {\n  print(\"Unknown medium\")\n}\nif (medium == \"LinkedIn\") {\n  print(\"Showing LinkedIn information\")\n} else if (medium == \"Facebook\") {\n  print(\"Showing Facebook information\")\n} else {\n  print(\"Unknown medium\")\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nExercise 2: Control structure for num_views\n\n\n\nAdd code to both control structures such that “Your number of views is average” is printed if num_views is between 15 (inclusive) and 10 (exclusive). Feel free to change the variable num_views to see how the control structure responds. The existing code should be extended in the else if statement. No existing code should be modified.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\n\nif (num_views &gt; 15) {\n  print(\"You're popular!\")\n} else if (num_views &lt;= 15 & num_views &gt; 10) {\n  print(\"Your number of views is average\")\n} else {\n  print(\"Try to be more visible!\")\n}\nif (num_views &gt; 15) {\n  print(\"You're popular!\")\n} else if (num_views &lt;= 15 & num_views &gt; 10) {\n  print(\"Your number of views is average\")\n} else {\n  print(\"Try to be more visible!\")\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\nElse if 2.0\nYou can do anything you want inside if-else constructs. You can even put in another set of conditional statements.\n\n\n\n\n\n\nQuestion\n\n\n\nExamine the following code chunk:\n\nif (number &lt; 10) {\n  if (number &lt; 5) {\n    result &lt;- \"extra small\"\n  } else {\n    result &lt;- \"small\"\n  }\n} else if (number &lt; 100) {\n  result &lt;- \"medium\"\n} else {\n  result &lt;- \"large\"\n}\nprint(result)\n\n\n\n\n\nIf number is set to 6, \"small\" gets printed to the console.\n\n\nIf number is set to 100, R prints out \"medium\".\n\n\nIf number is set to 4, \"extra small\" gets printed out to the console.\n\n\nIf number is set to 2500, R will generate an error, as result will not be defined.\n\n\n\n\n\n\n\nIf you got this one right, the next exercise will be a piece of cake.\n\n\n\n\nTake control!\nIn this exercise, you will combine everything that you’ve learned so far: relational operators, logical operators and control constructs. You’ll need it all!\nIn the editor, we’ve coded two values beforehand: li and fb, denoting the number of profile views your LinkedIn and Facebook profile had on the last day of recordings. Go through the instructions to create R code that generates a ‘social media score’, sms, based on the values of li and fb.\n\n# Variables related to your last day of recordings\nli &lt;- 15\nfb &lt;- 9\n\n\n\n\n\n\n\nExercise 1: Control-flow construct\n\n\n\nFinish the control-flow construct with the following behavior:\n\nIf both li and fb are 15 or higher, set sms equal to double the sum of li and fb.\nIf both li and fb are strictly below 10, set sms equal to half the sum of li and fb.\nIn all other cases, set sms equal to li + fb.\nFinally, print the resulting sms variable to the console.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\n\nif (li &gt;= 15 & fb &gt;= 15) {\n  sms &lt;- 2 * (li + fb)\n} else if (li &lt; 10 & fb &lt; 10) {\n  sms &lt;- 0.5 * (li + fb)\n} else {\n  sms &lt;- li + fb\n}\n\nsms\nif (li &gt;= 15 & fb &gt;= 15) {\n  sms &lt;- 2 * (li + fb)\n} else if (li &lt; 10 & fb &lt; 10) {\n  sms &lt;- 0.5 * (li + fb)\n} else {\n  sms &lt;- li + fb\n}\n\nsms\n\n\n\n\n\n\n\n\n\n\n\n\n\nCongratulations! You’ve finished Chapter 1!\nYou have finished the chapter “Conditionals and control flow”!"
  },
  {
    "objectID": "Intermediate_R.html#chap.-2-loops",
    "href": "Intermediate_R.html#chap.-2-loops",
    "title": "Intermediate R",
    "section": "Chap. 2: Loops",
    "text": "Chap. 2: Loops\nLoops can come in handy on numerous occasions. while loops are like repeated if statements; the for loop is designed to iterate over all elements in a sequence. Learn all about them in this chapter.\n\nWrite a while loop\nwhile loops consist of a condition and a code block, just like an if statement. In while loops, however, the code block gets run as long as the condition is TRUE. Here’s the R syntax for a while loop.\n\nwhile (condition) {\n  # Run this code block while the condition is TRUE\n}\n\nNote: The code block will run over and over and over … again until condition becomes FALSE. Thus, something must change within the code block that can change the condition from TRUE to FALSE. If not, then you are guaranteed to have an infinite loop!\nNo programmer makes it through loops unscathed. At some point, you will have an infinite loop occur. Don’t worry - the world doesn’t implode and your computer will be fine. In this tutorial, if you accidentally have an infinite loop, the “Run Code” button will have a spinning icon for about 30 seconds, then the process will be terminated. Let’s go ahead and get your first infinite loop out of the way to show you it isn’t the end of the world. Run the following infinite loop.\n\n\n\n\n\n\n\n\nHere’s an example that will not have an infinite loop. Try to guess how many times the code block within the loop will run.\n\n\n\n\n\n\n\n\nRemember: the condition part of this recipe should become FALSE at some point during the execution. Otherwise, the while loop will go on indefinitely.\nTime for some exercises!\n\n\n\n\n\n\nExercise: Write a while loop\n\n\n\nHave a look at the code below; it initializes the speed variables and already provides a while loop template to get you started. Code a while loop with the following characteristics:\n\nThe condition of the while loop should check if speed is higher than 30.\nInside the body of the while loop, print out \"Slow down!\".\nInside the body of the while loop, decrease the speed by 7 units. This step is crucial; otherwise your while loop will go to infinity and beyond!\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\n\n# Initialize the speed variable\nspeed &lt;- 64\n\n# Code the while loop\nwhile (speed &gt; 30) {\n  print(\"Slow down!\")\n  speed &lt;- speed - 7\n}\n\n# Print out the speed variable\nspeed\n# Initialize the speed variable\nspeed &lt;- 64\n\n# Code the while loop\nwhile (speed &gt; 30) {\n  print(\"Slow down!\")\n  speed &lt;- speed - 7\n}\n\n# Print out the speed variable\nspeed\n\n\n\n\n\n\n\n\n\n\n\n\n\nThrow in more conditionals\nIn the previous exercise, you simulated the interaction between a driver and a driver’s assistant: When the speed was too high, “Slow down!” got printed out to the console, resulting in a decrease of your speed by 7 units.\nThere are several ways in which you could make your driver’s assistant more advanced. For example, the assistant could give you different messages based on your speed or provide you with a current speed at a given moment.\n\n\n\n\n\n\nExercise: Throw in more conditionals\n\n\n\nA while loop similar to the one you’ve coded in the previous exercise is already available in the editor. It prints out your current speed, but there’s no code that decreases the speed variable yet, which is pretty dangerous. Can you make the appropriate changes?\n\nIf the speed is greater than 48, have R print out “Slow down big time!”, and decrease the speed by 11.\nOtherwise, have R simply print out “Slow down!”, and decrease the speed by 6.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\n\n# Initialize the speed variable\nspeed &lt;- 64\n\n# Extend/adapt the while loop\nwhile (speed &gt; 30) {\n  print(paste(\"Your speed is\", speed))\n  if (speed &gt; 48) {\n    print(\"Slow down big time!\")\n    speed &lt;- speed - 11\n  } else {\n    print(\"Slow down!\")\n    speed &lt;- speed - 6\n  }\n}\n# Initialize the speed variable\nspeed &lt;- 64\n\n# Extend/adapt the while loop\nwhile (speed &gt; 30) {\n  print(paste(\"Your speed is\", speed))\n  if (speed &gt; 48) {\n    print(\"Slow down big time!\")\n    speed &lt;- speed - 11\n  } else {\n    print(\"Slow down!\")\n    speed &lt;- speed - 6\n  }\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\nStop the while loop with break\nThere is a break command that can “break” you out of the loop, even if the while condition is not TRUE. Before you run the code below, guess how many times a result is printed.\n\n\n\n\n\n\n\n\nGetting back to the previous example, there are some very rare situations in which severe speeding is necessary: what if a hurricane is approaching and you have to get away as quickly as possible? You don’t want the driver’s assistant sending you speeding notifications in that scenario, right?\nThis seems like a great opportunity to include the break statement in the while loop you’ve been working on. The break statement is a control statement. When R encounters it, the while loop is abandoned completely.\n\n\n\n\n\n\nExercise: Stop the while loop with break\n\n\n\nAdapt the while loop such that it is abandoned when the speed of the vehicle is greater than 80. This time, the speed variable has been initialized to 88; keep it that way.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\n\n# Initialize the speed variable\nspeed &lt;- 88\n\nwhile (speed &gt; 30) {\n  print(paste(\"Your speed is\", speed))\n\n  # Break the while loop when speed exceeds 80\n  if (speed &gt; 80) {\n    break\n  }\n\n  if (speed &gt; 48) {\n    print(\"Slow down big time!\")\n    speed &lt;- speed - 11\n  } else {\n    print(\"Slow down!\")\n    speed &lt;- speed - 6\n  }\n}\n# Initialize the speed variable\nspeed &lt;- 88\n\nwhile (speed &gt; 30) {\n  print(paste(\"Your speed is\", speed))\n\n  # Break the while loop when speed exceeds 80\n  if (speed &gt; 80) {\n    break\n  }\n\n  if (speed &gt; 48) {\n    print(\"Slow down big time!\")\n    speed &lt;- speed - 11\n  } else {\n    print(\"Slow down!\")\n    speed &lt;- speed - 6\n  }\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\nBuild a while loop from scratch\nThe previous exercises guided you through developing a pretty advanced while loop, containing a break statement and different messages and updates as determined by control flow constructs. If you manage to solve this comprehensive exercise using a while loop, you’re totally ready for the next topic: the for loop.\n\n\n\n\n\n\nExercise: Build a while loop from scratch\n\n\n\nFinish the while loop so that it:\n\nPrints out the triple of i, so 3 * i, at each run.\nLoop is abandoned with a break if the triple of i is divisible by 8, but still prints out this triple before breaking.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\n\n# Initialize i as 1 \ni &lt;- 1\n\n# Code the while loop\nwhile (i &lt;= 10) {\n  print(3 * i)\n  if (3 * i %% 8 == 0) {\n    break\n  }\n  i &lt;- i + 1\n}\n# Initialize i as 1 \ni &lt;- 1\n\n# Code the while loop\nwhile (i &lt;= 10) {\n  print(3 * i)\n  if (3 * i %% 8 == 0) {\n    break\n  }\n  i &lt;- i + 1\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\nFor loops\nAs mentioned above, the for loop is useful to repeat a code block for every index or value in a vector or list. The for loop has the following syntax in R.\n\nfor (var in seq) {\n  # Run this code block for every var in the seq vector\n}\n\n\nLooping over a vector\nHere’s a working example of looping over a vector. If you run the code, every city in the cities vector will be printed on its own line.\n\n\n\n\n\n\n\n\nThe city variable in the for loop above is sometimes called a dummy variable.\n\n\nLooping over a list\nYou can also use a for loop to loop over a list. Note that the only change in the code below is changing the concatenation function c to the list creation function list.\n\n\n\n\n\n\n\n\n\n\nBreaking out of a for loop\nJust as you can use a break statement to prematurely break out of a while loop, you can use a break statement to prematurely break out of a for loop as well. Guess when the following code will stop printing.\n\n\n\n\n\n\n\n\n\n\nSkipping values in a for loop\nSometimes, instead of breaking out of a loop when a condition is met, you just want to make sure the code block is not run when a certain condition is met, but you want to continue the loop. This is where the next statement comes into play. What do you think the output will be for the following code?\n\n\n\n\n\n\n\n\nIt looks like London is not printed! This code will skip ALL cities that consist of 6 characters. To test this, add another city in the list above that consists of 6 characters - it shouldn’t be printed when you run the code.\n\n\nFor loops (version 2): Looping with indices instead of values\nIn version 1 of for loops above, we iterated over the values of vectors and lists. In version 2 of for loops, we’ll iterate over the indices of vectors and lists. Here’s the equivalent for loop that iterates over the cities, but uses the indices instead.\n\n\n\n\n\n\n\n\nNote that inside the code block, you refer to the variable i to get the current index in the loop, and to get the value at index i you need to use the subsetted value of the cities vector given by cities[i].\nThis version of the for loop is particularly helpful when the code in the code block needs the value and the index in the vector. For example:\n\n\n\n\n\n\n\n\n\n\nWrap-up: for loops\nVersion 1 of the for loop (looping over values) is:\n\n(+) Concise\n(+) Easy to read\n(-) No access to looping index\n\nVersion 2 of the for loop (looping over indices) is:\n\n(-) Harder to read and write\n(+) More versatile as you have access to the looping index\n\nHere we show them in code side-by-side for easy comparison:\n\nprimes &lt;- c(2, 3, 5, 7, 11, 13)\n\n# loop version 1\nfor (p in primes) {           # + Concise\n  print(p)                    # + Easy to read\n}                             # - No access to looping index\n\n# loop version 2\nfor (i in 1:length(primes)) { # - Harder to read and write\n  print(primes[i])            # + More versatile\n}\n\nAlright, time to practice!\nRemember our linkedin vector? It’s a vector that contains the number of views your LinkedIn profile had in the last seven days. The linkedin vector has already been defined in the editor below so that you can fully focus on the instructions!\n\n\n\n\n\n\nExercise: Loop over a vector\n\n\n\nWrite a for loop that iterates over all the elements of linkedin and prints out every element separately. Do this in two ways: using the loop version 1 and the loop version 2 in the example code above.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\n\n# The linkedin vector has already been defined for you\nlinkedin &lt;- c(16, 9, 13, 5, 2, 17, 14)\n\n# Loop version 1\nfor (view in linkedin) {\n  print(view)\n}\n\n# Loop version 2\nfor (i in 1:length(linkedin)) {\n  print(linkedin[i])\n}\n# The linkedin vector has already been defined for you\nlinkedin &lt;- c(16, 9, 13, 5, 2, 17, 14)\n\n# Loop version 1\nfor (view in linkedin) {\n  print(view)\n}\n\n# Loop version 2\nfor (i in 1:length(linkedin)) {\n  print(linkedin[i])\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nLoop over a list\nLooping over a list is just as easy and convenient as looping over a vector. There are again two different approaches here:\n\nprimes_list &lt;- list(2, 3, 5, 7, 11, 13)\n\n# loop version 2\nfor (p in primes_list) {\n  print(p)\n}\n\n# loop version 2\nfor (i in 1:length(primes_list)) {\n  print(primes_list[[i]])\n}\n\nNotice that you need double square brackets - [[ ]] - to select the list elements in loop version 2.\nSuppose you have a list of all sorts of information on New York City: its population size, the names of the boroughs, and whether it is the capital of the United States. We’ve already prepared a list nyc with all this information in the editor (source: Wikipedia).\n\n\n\n\n\n\nExercise: Loop over a list\n\n\n\nAs in the previous exercise, loop over the nyc list in two different ways to print its elements:\n\nLoop directly over the nyc list (loop version 1).\nDefine a looping index and do subsetting using double brackets (loop version 2).\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\n\n# The nyc list is already specified\nnyc &lt;- list(pop = 8405837, \n            boroughs = c(\"Manhattan\", \"Bronx\", \"Brooklyn\", \"Queens\", \"Staten Island\"), \n            capital = FALSE)\n\n# Loop version 1\nfor (element in nyc) {\n  print(element)\n}\n\n# Loop version 2\nfor (i in 1:length(nyc)) {\n  print(nyc[[i]])\n}\n# The nyc list is already specified\nnyc &lt;- list(pop = 8405837, \n            boroughs = c(\"Manhattan\", \"Bronx\", \"Brooklyn\", \"Queens\", \"Staten Island\"), \n            capital = FALSE)\n\n# Loop version 1\nfor (element in nyc) {\n  print(element)\n}\n\n# Loop version 2\nfor (i in 1:length(nyc)) {\n  print(nyc[[i]])\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\nLoop over a matrix\nIn your workspace below, we create a matrix ttt, that represents the status of a tic-tac-toe game. It contains the values “X”, “O” and “NA”. Print out ttt in the console so you can have a closer look. On row 1 and column 1, there’s “O”, while on row 3 and column 2 there’s “NA”.\n\n\n\n\n\n\n\n\nTo solve this exercise, you’ll need a for loop inside a for loop, often called a nested loop. Doing this in R is a breeze! Simply use the following recipe:\n\nfor (var1 in seq1) {\n  for (var2 in seq2) {\n    expr\n  }\n}\n\n\n\n\n\n\n\nExercise: Loop over a matrix\n\n\n\nFinish the nested for loops to go over the elements in ttt:\n\nThe outer loop should loop over the rows, with loop index i (use 1:nrow(ttt)).\nThe inner loop should loop over the columns, with loop index j (use 1:ncol(ttt)).\nInside the inner loop, make use of print() and paste() to print out information in the following format: “On row i and column j the board contains x”, where x is the value on that position.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\n\n# Define the double for loop\nfor (i in 1:nrow(ttt)) {\n  for (j in 1:ncol(ttt)) {\n    print(paste(\"On row\", i, \"and column\", j, \"the board contains\", ttt[i,j]))\n  }\n}\n# Define the double for loop\nfor (i in 1:nrow(ttt)) {\n  for (j in 1:ncol(ttt)) {\n    print(paste(\"On row\", i, \"and column\", j, \"the board contains\", ttt[i,j]))\n  }\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\nMix it up with control flow\nLet’s return to the LinkedIn profile views data, stored in a vector linkedin. In the first exercise on for loops you already did a simple printout of each element in this vector. A little more in-depth interpretation of this data wouldn’t hurt, right? Time to throw in some conditionals! As with the while loop, you can use the if and else statements inside the for loop.\n\n\n\n\n\n\nExercise: Mix it up with control flow\n\n\n\nAdd code to the for loop that loops over the elements of the linkedin vector:\n\nIf the vector element’s value exceeds 10, print out “You’re popular!”.\nIf the vector element’s value does not exceed 10, print out “Be more visible!”\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\n\n# The linkedin vector has already been defined for you\nlinkedin &lt;- c(16, 9, 13, 5, 2, 17, 14)\n\n# Code the for loop with conditionals\nfor (li in linkedin) {\n  if (li &gt; 10) {\n    print(\"You're popular!\")\n  } else {\n    print(\"Be more visible!\")\n  }\n  print(li)\n}\n# The linkedin vector has already been defined for you\nlinkedin &lt;- c(16, 9, 13, 5, 2, 17, 14)\n\n# Code the for loop with conditionals\nfor (li in linkedin) {\n  if (li &gt; 10) {\n    print(\"You're popular!\")\n  } else {\n    print(\"Be more visible!\")\n  }\n  print(li)\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\nNext, you break it\nIn the editor below you’ll find a possible solution to the previous exercise. The code loops over the linkedin vector and prints out different messages depending on the values of li.\nIn this exercise, you will use the break and next statements:\n\nThe break statement abandons the active loop: the remaining code in the loop is skipped and the loop is not iterated over anymore.\nThe next statement skips the remainder of the code in the loop, but continues the iteration.\n\n\n\n\n\n\n\nExercise: Next, you break it\n\n\n\nExtend the for loop with two new, separate if tests in the editor as follows:\n\nIf the vector element’s value exceeds 16, print out “This is ridiculous, I’m outta here!” and have R abandon the for loop (break).\nIf the value is lower than 5, print out “This is too embarrassing!” and fast-forward to the next iteration (next).\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\n\n# The linkedin vector has already been defined for you\nlinkedin &lt;- c(16, 9, 13, 5, 2, 17, 14)\n\n# Extend the for loop\nfor (li in linkedin) {\n  if (li &gt; 10) {\n    print(\"You're popular!\")\n  } else {\n    print(\"Be more visible!\")\n  }\n  # Add if statement with break\n  if(li &gt; 16){\n    print(\"This is ridiculous, I'm outta here!\")\n    break\n  }\n  # Add if statement with next\n  if(li &lt; 5){\n    print(\"This is too embarrassing!\")\n    next\n  }\n  print(li)\n}\n# The linkedin vector has already been defined for you\nlinkedin &lt;- c(16, 9, 13, 5, 2, 17, 14)\n\n# Extend the for loop\nfor (li in linkedin) {\n  if (li &gt; 10) {\n    print(\"You're popular!\")\n  } else {\n    print(\"Be more visible!\")\n  }\n  # Add if statement with break\n  if(li &gt; 16){\n    print(\"This is ridiculous, I'm outta here!\")\n    break\n  }\n  # Add if statement with next\n  if(li &lt; 5){\n    print(\"This is too embarrassing!\")\n    next\n  }\n  print(li)\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\nBuild a for loop from scratch\nThis exercise will not introduce any new concepts on for loops.\nIn the editor below, we already went ahead and defined a variable rquote. This variable has been split up into a vector that contains separate letters and has been stored in a vector chars with the strsplit() function.\nCan you write code that counts the number of r’s that come before the first u in rquote?\n\n\n\n\n\n\nExercise: Build a for loop from scratch\n\n\n\nInitialize the variable rcount, as 0. Finish the for loop:\n\nif char equals \"r\", increase the value of rcount by 1.\nif char equals \"u\", leave the for loop entirely with a break.\nFinally, print out the variable rcount to the console to see if your code is correct.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\n\n# Pre-defined variables\nrquote &lt;- \"r's internals are irrefutably intriguing\"\nchars &lt;- strsplit(rquote, split = \"\")[[1]]\n\n# Initialize rcount\nrcount &lt;- 0\n\n# Finish the for loop\nfor (char in chars) {\n  if(char == \"r\") {\n    rcount &lt;- rcount + 1\n  }\n  if(char == \"u\") {\n    break\n  }\n}\n\n# Print out rcount\nrcount\n# Pre-defined variables\nrquote &lt;- \"r's internals are irrefutably intriguing\"\nchars &lt;- strsplit(rquote, split = \"\")[[1]]\n\n# Initialize rcount\nrcount &lt;- 0\n\n# Finish the for loop\nfor (char in chars) {\n  if(char == \"r\") {\n    rcount &lt;- rcount + 1\n  }\n  if(char == \"u\") {\n    break\n  }\n}\n\n# Print out rcount\nrcount\n\n\n\n\n\n\n\n\n\n\n\n\n\nCongratulations! You’ve finished Chapter 2!\nYou have finished the chapter “Loops”!"
  },
  {
    "objectID": "Intermediate_R.html#chap.-3-functions",
    "href": "Intermediate_R.html#chap.-3-functions",
    "title": "Intermediate R",
    "section": "Chap. 3: Functions",
    "text": "Chap. 3: Functions\nFunctions are an extremely important concept in almost every programming language; R is not different. After learning what a function is and how you can use one, you’ll take full control by writing your own functions.\n\nDefinitions\nYou’ve likely already seen functions in your math classes. For example, \\(y = f(x)\\) denotes a relationship that assigns the output value \\(y\\) from the input value \\(x\\). In this example, the function \\(f\\) only takes one input value, but functions can be generalized to accept multiple input values. You may have seen this function box image (or something similar):\n\n\n\n\n\n\n\n\n\nIn mathematics, functions are mathematical equations, like \\(f(x) = 2x^2\\), that describe what you do to \\(x\\) to get \\(y\\) using mathematical operations. An R function that performs the same mathematical operations as \\(f\\) looks like this:\n\nf &lt;- function(x) {\n  return(2*x^2)\n}\n\nNote the return at the end which signifies that the function f should have an explicit output. Not all code functions need to have an explicit output. Also, the return is technically not necessary. Whatever is on the last line of the function will automatically get returned as output. Let’s evaluate the R function f with different inputs. Guess the value before calling the function based on the equivalent mathematical function \\(f(x) = 2x^2\\). Feel free to change the input values!\n\n\n\n\n\n\n\n\n\n\n\nSimilar to mathematical functions, R functions expect a certain type of input. Make sure you know what data type the input should be in order for the function to work. Does our function f work for Boolean data types, for example?\n\n\n\n\n\n\nQuestion\n\n\n\nWhat would the value of f(TRUE) be?\n\n\n\n\nTRUE\n\n\nFALSE\n\n\n2\n\n\n0\n\n\nThe function won't work and will throw an error.\n\n\n\n\n\n\n\n\n\nNow try it out! Evaluate f with input TRUE and FALSE.\n\n\n\n\n\n\n\n\n\n\n\nThis works because R will coerce Boolean values to numerical values when in an arithmetical statement.\n\n\n\n\n\n\nQuestion\n\n\n\nWhat do you think will happen if I call f on an input vector, like f(c(2, 4))?\n\n\n\n\nIt will return 40.\n\n\nIt will return the vector `c(8, 32)`\n\n\nThe function won't work and will throw an error.\n\n\n\n\n\n\n\n\n\nMany R functions that work on single numbers will also work on vectors by performing the function element-wise on each element of the vector.\nTry and evaluate the function f on different vectors.\n\n\n\n\n\n\n\n\n\n\n\nIn general, an R function may have multiple inputs (called arguments) and only one output.\n\n\n\n\n\n\n\n\n\nBesides being able to create our own function in R, it is important to learn how to use the plethora of existing R functions available to you. That is the subject of the next section.\n\n\nFunction documentation\nBefore even thinking of using an R function, you should clarify which arguments it expects. All the relevant details such as a description, usage, and arguments can be found in the documentation. To consult the documentation on the sd() function, for example, you can use one of following R commands:\n\nhelp(sd)\n?sd\n\nTry one of these commands yourself in the console below to see what happens.\n\n\n\n\n\n\n\n\nAnother much more direct way to see just the arguments of the sd() function is the args() function. Try it out in the console:\n\n\n\n\n\n\n\n\nNote the difference between the first argument x and the last argument na.rm. The last argument has a default value, meaning that you do not have to specify that argument in your call to the function. If you don’t specify it, the default will be used (e.g. na.rm is FALSE by default, which means don’t remove missing values by default). Since the first argument x does not have a default value, it is required - if you don’t give it a value, the function will likely not work.\nSo how do you specify function arguments when there are more than one? You can refer to function arguments by position and by name.\n\nvalues &lt;- c(1, 5, 6, 7)\nsd(values)     # Specify by position\n\n[1] 2.629956\n\nsd(x = values) # Specify by name\n\n[1] 2.629956\n\n\nYou can even do a combination of both. To illustrate this, let’s look at an example that has an NA (“not a number”) in one of the values. The value NA is useful to represent a missing value in your data.\n\nvalues &lt;- c(1, 5, 6, NA)\nsd(values)\n\n[1] NA\n\n\nNote what happens by default when there is a missing value - sd returns NA! This is important to alert the data scientist that there might be missing values in your data. If you decide that omitting missing values in your calculation of the standard deviation is okay, then you can specify the second argument na.rm and set it to TRUE. Here are multiple ways to do that.\n\nsd(values, TRUE)             # Specify both arguments by position\nsd(values, na.rm = TRUE)     # Specify na.rm by name\nsd(x = values, na.rm = TRUE) # Specify both by name\nsd(na.rm = TRUE, x = values) # Specify both by name, but reversed order\n\nThe last command shows that named arguments can be specified in any order, as long as the ones specified by position are in the correct position. In this case, none were specified by position so we could put them in any order we wanted!\nIn the next exercises, you’ll be learning how to use the mean() function with increasing complexity. The first thing you’ll have to do is get acquainted with the mean() function.\n\n\n\n\n\n\nExercise 1: Consult the documentation on the mean() function\n\n\n\nConsult the documentation on the mean() function: ?mean or help(mean).\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\n\n?mean\n# or\nhelp(mean)\n\n\n\n\n\n\n\n\n\n\n\n\n\nExercise 2: Inspect the arguments of the mean() function\n\n\n\nInspect the arguments of the mean() function using the args() function.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\n\nargs(mean)\nargs(mean)\n\n\n\n\n\n\n\n\n\n\n\n\n\nUse a function\nThe documentation on the mean() function gives us quite some information:\n\nThe mean() function computes the arithmetic mean.\nThe most general method takes multiple arguments: x and ....\nThe x argument should be a vector containing numeric, logical or time-related information.\n\nRemember that R can match arguments both by position and by name. Can you still remember the difference? You’ll find out in this exercise!\nOnce more, you’ll be working with the view counts of your social network profiles for the past 7 days. These are stored in the linkedin and facebook vectors and have already been defined in the editor below.\n\nlinkedin &lt;- c(16, 9, 13, 5, 2, 17, 14)\nfacebook &lt;- c(17, 7, 5, 16, 8, 13, 14)\n\n\n\n\n\n\n\nExercise 1: Calculate average number of views\n\n\n\nCalculate the average number of views for both linkedin and facebook and assign the result to avg_li and avg_fb, respectively. Experiment with different types of argument matching!\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\n\navg_li &lt;- mean(linkedin)\navg_fb &lt;- mean(facebook)\navg_li &lt;- mean(linkedin)\navg_fb &lt;- mean(facebook)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nExercise 2: Print average number of views\n\n\n\nPrint out both avg_li and avg_fb.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\n\navg_li\navg_fb\navg_li\navg_fb\n\n\n\n\n\n\n\n\n\n\n\n\n\nUse a function: Optional arguments\nCheck the documentation on the mean() function again, paying particular attention to the Usage section:\n\n\n\n\n\n\n\n\nThe Usage section of the documentation includes two versions of the mean() function. The first usage,\n\nmean(x, ...)\n\nis the most general usage of the mean function. The ‘Default S3 method’, however, is:\n\nmean(x, trim = 0, na.rm = FALSE, ...)\n\nThe ... is called dot-dot-dot, or ellipsis. It is a way for R to pass arguments along without the function having to name them explicitly.\nFor the next exercise, just work with the second usage of the mean function. Notice that both trim and na.rm have default values. Again, this makes them optional arguments.\n\n\n\n\n\n\nExercise 1: Calculate the mean of the sum\n\n\n\nCalculate the mean of the element-wise sum of linkedin and facebook and assign the result to avg_sum.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\n\navg_sum &lt;- mean(linkedin + facebook)\navg_sum &lt;- mean(linkedin + facebook)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nExercise 2: Calculate the trimmed mean of the sum\n\n\n\nCalculate the mean once more, but this time set the trim argument equal to 0.2 and assign the result to avg_sum_trimmed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\n\navg_sum_trimmed &lt;- mean(linkedin + facebook, trim = 0.2)\navg_sum_trimmed &lt;- mean(linkedin + facebook, trim = 0.2)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nExercise 3: Inspect both new variables\n\n\n\nPrint out both avg_sum and avg_sum_trimmed; can you spot the difference?\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\n\navg_sum\navg_sum_trimmed\navg_sum\navg_sum_trimmed\n\n\n\n\n\n\n\n\n\n\n\n\n\nUse a function: Missing values\nPreviously, we guided you through the example of specifying arguments of the sd() function. The sd() function has an optional argument, na.rm that specified whether or not to remove missing values from the input vector before calculating the standard deviation.\nIf you’ve had a good look at the documentation, you’ll know by now that the mean() function also has this argument, na.rm, and it does the exact same thing. By default, it is set to FALSE, as the Usage of the Default S3 method shows:\n\nmean(x, trim = 0, na.rm = FALSE, ...)\n\nLet’s see what happens if your vectors linkedin and facebook contain missing values (NA). Here are the previous linkedin and facebook vectors, now with some missing values inserted.\n\nlinkedin &lt;- c(16, 9, 13, 5, NA, 17, 14)\nfacebook &lt;- c(17, NA, 5, 16, 8, 13, 14)\n\n\n\n\n\n\n\nExercise 1: Basic average of linkedin\n\n\n\nCalculate the average number of LinkedIn profile views, without specifying any optional arguments. Simply print the result to the console.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\n\nmean(linkedin)\nmean(linkedin)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nExercise 2: Advanced average of linkedin\n\n\n\nCalculate the average number of LinkedIn profile views, but this time tell R to strip missing values from the input vector.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\n\nmean(linkedin, na.rm = TRUE)\nmean(linkedin, na.rm = TRUE)\n\n\n\n\n\n\n\n\n\n\n\n\n\nFunctions inside functions\nYou might remember that you can compose mathematical functions, where the output of one function is the input of another. If you have a function \\(y = f(x)\\) and another function \\(z = g(y)\\), then you can talk about the composite function \\((g \\circ f)(x) = g(f(x))\\).\n\n\n\n\n\n\n\n\n\nYou can also compose functions in R using a similar syntax by embedding one function inside another.\n\n\n\n\n\n\n\n\n\nHere’s an example of composing the functions paste() and print() that you’ve seen in a previous exercise:\n\nspeed &lt;- 31\nprint(paste(\"Your speed is\", speed))\n\n[1] \"Your speed is 31\"\n\n\nNotice that both the print() and paste() functions use the ellipsis - ... - as an argument. Can you figure out how they’re used?\nFor the next exercise, we’ll start again with the linkedin and facebook vectors that contain missing values.\n\nlinkedin &lt;- c(16, 9, 13, 5, NA, 17, 14)\nfacebook &lt;- c(17, NA, 5, 16, 8, 13, 14)\n\n\n\n\n\n\n\nExercise 1: Calculate the mean absolute deviation\n\n\n\nUse abs() on linkedin - facebook to get the absolute differences between the daily Linkedin and Facebook profile views. Next, use this function call inside mean() to calculate the Mean Absolute Deviation. In the mean() call, make sure to specify na.rm to treat missing values correctly!\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\n\nmean(abs(linkedin - facebook), na.rm = TRUE)\nmean(abs(linkedin - facebook), na.rm = TRUE)\n\n\n\n\n\n\n\n\n\n\n\n\n\nRequired, or optional?\nBy now, you will probably have a good understanding of the difference between required and optional arguments. Let’s refresh this difference by having one last look at the mean() function:\n\nmean(x, trim = 0, na.rm = FALSE, ...)\n\nx is required; if you do not specify it, R will throw an error. trim and na.rm are optional arguments: they have a default value which is used if the arguments are not explicitly specified.\nCheck the arguments for the read.table() function in the following console to answer the next question.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\n\nargs(read.table)\n\n\n\n\n\n\n\n\n\n\nQuestion\n\n\n\n“Which of the following statements about the read.table() function are true?”\n\n\n\n\n`header`, `sep` and `quote` are all optional arguments.\n\n\n`row.names` and `fileEncoding` don't have default values.\n\n\n`read.table(\"myfile.txt\", \"-\", TRUE)` will throw an error.\n\n\n`read.table(\"myfile.txt\", sep = \"-\", header = TRUE)` will throw an error.\n\n\n\n\n\n\n\n\n\nUsing functions that are already available in R is pretty straightforward, but how about writing your own functions to supercharge your R programs?\n\n\nWrite your own function\nWow, things are getting serious… You’re about to write your own function! You already saw a function f that was created in the beginning of this chapter to perform computationally the same operations as the mathematical function \\(f(x) = 2x^2\\). Before you have a go at creating your own function, have a look at the following function template:\n\nmy_fun &lt;- function(arg1, arg2) {\n  body\n}\n\nNotice that this recipe uses the assignment operator (&lt;-) just as if you were assigning a vector to a variable for example. This is not a coincidence. Creating a function in R basically is the assignment of a function object to a variable! In the recipe above, you’re creating a new R variable my_fun, that becomes available in the workspace as soon as you execute the definition. From then on, you can use the my_fun as a function.\n\n\n\n\n\n\nExercise 1: Create a function pow_two()\n\n\n\nCreate a function pow_two(): it takes one argument x and returns that number squared (that number times itself).\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\n\npow_two &lt;- function(x) {\n  x * x\n}\npow_two &lt;- function(x) {\n  x * x\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nExercise 2: Use the function\n\n\n\nCall this newly defined function with 12 as input.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\n\npow_two(12)\npow_two(12)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nExercise 3: Create a function sum_abs()\n\n\n\nNext, create a function sum_abs(), that takes two arguments a and b and returns the sum of the absolute values of both arguments.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\n\nsum_abs &lt;- function(a, b) {\n  abs(a) + abs(b)  \n}\nsum_abs &lt;- function(a, b) {\n  abs(a) + abs(b)  \n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nExercise 4: Use the function\n\n\n\nFinally, call the function sum_abs() with arguments -2 and 3 afterwards.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\n\nsum_abs(-2, 3)\nsum_abs(-2, 3)\n\n\n\n\n\n\n\n\n\n\n\n\n\nWrite your own function: No arguments\nThere are situations in which your function does not require an input. Let’s say you want to write a function that gives us the random outcome of throwing a fair die:\n\nthrow_die &lt;- function() {\n  number &lt;- sample(1:6, size = 1)\n  number\n}\n\nthrow_die()\n\n[1] 6\n\n\nIn the next exercise, you will code a function that doesn’t take any arguments!\n\n\n\n\n\n\nExercise 1: Define the function hello()\n\n\n\nDefine a function, hello(). It prints out “Hi there!” and returns TRUE. It has no arguments.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\n\nhello &lt;- function() {\n  print(\"Hi there!\")\n  return(TRUE)\n}\nhello &lt;- function() {\n  print(\"Hi there!\")\n  return(TRUE)\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nExercise 2: Call the function hello()\n\n\n\nCall the function hello(), without specifying arguments of course.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\n\nhello()\nhello()\n\n\n\n\n\n\n\n\n\n\n\n\n\nWrite your own function: Default values\nDo you still remember the difference between an argument with and without default values? Have another look at the sd() function by typing ?sd in the console. The usage section shows the following information:\n\nsd(x, na.rm = FALSE)\n\nThis tells us that x has to be defined for the sd() function to be called correctly. However, na.rm already has a default value and not specifying this argument won’t cause an error.\nYou can define default argument values in your own R functions as well. You can use the following recipe to do so:\n\nmy_fun &lt;- function(arg1, arg2 = val2) {\n  body\n}\n\n\n\n\n\n\n\nExercise: Finish the pow_two() function\n\n\n\nThe editor below contains an extended version of the pow_two() function from before. Can you finish it?\n\nAdd an optional argument, named print_info, that is TRUE by default.\nWrap an if construct around the print() function: this function should only be executed if print_info is TRUE.\nFeel free to experiment with the pow_two() function you’ve just coded.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\n\npow_two &lt;- function(x, print_info = TRUE) {\n  y &lt;- x * x\n  if (print_info == TRUE){\n    print(paste(x, \"to the power two equals\", y))\n  }\n  return(y)\n}\npow_two &lt;- function(x, print_info = TRUE) {\n  y &lt;- x * x\n  if (print_info == TRUE){\n    print(paste(x, \"to the power two equals\", y))\n  }\n  return(y)\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\nFunction scoping\nAn issue that we have not discussed yet is function scoping. It implies that variables that are defined inside a function are not accessible outside that function. Try running the following code and see if you understand the results:\n\n\n\n\n\n\n\n\ny was defined inside the pow_two() function and therefore it is not accessible outside of that function. This is also true for the function’s arguments of course - x in this case.\n\n\n\n\n\n\nQuestion\n\n\n\nConsider the following chunk of code:\n\n\n\n\n\n\n\n\nWhich statement is correct about the function two_dice()? Feel free to check each option in the code editor above if you are unsure.\n\n\n\n\nExecuting `two_dice()` causes an error.\n\n\nExecuting `res &lt;- two_dice()` makes the contents of `dice1` and `dice2` available outside the function.\n\n\nWhatever the way of calling the `two_dice()` function, R won't have access to `dice1` and `dice2` outside the function.\n\n\n\n\n\n\n\n\n\nIf you’re familiar with other programming languages, you might wonder whether R passes arguments by value or by reference. Find out in the next exercise!\n\n\nR passes arguments by value\nThe title gives it away already: R passes arguments by value. What does this mean? Simply put, it means that an R function cannot change the variable that you input to that function. Let’s look at a simple example (try it in the editor):\n\n\n\n\n\n\n\n\nInside the triple() function, the argument x gets overwritten with its value times three. Afterwards this new x is returned. If you call this function with a variable a set equal to 5, you obtain 15. But did the value of a change? If R were to pass a to triple() by reference, the override of the x inside the function would ripple through to the variable a, outside the function. However, R passes by value, so the R objects you pass to a function can never change unless you do an explicit assignment. a remains equal to 5, even after calling triple(a). Basically, you can think of R as making a copy of the value of a and assigning it to the argument x.\n\n\n\n\n\n\nQuestion\n\n\n\nConsider the following chunk of code:\n\nincrement &lt;- function(x, inc = 1) {\n  x &lt;- x + inc\n  x\n}\n    \ncount &lt;- 5\na &lt;- increment(count, 2)\nb &lt;- increment(count)\ncount &lt;- increment(count, 2)\n\nCan you tell which one of the following statements is false about the above piece of code?\n\n\n\n\n`a` and `b` equal 7 and 6 respectively after executing this code block.\n\n\nAfter the first call of `increment()`, where `a` is defined, `a` equals 7 and count equals 5.\n\n\nIn the end, `count` will equal 10.\n\n\nIn the last expression, the value of `count` was actually changed because of the explicit assignment.\n\n\n\n\n\n\n\n\n\nGiven that R passes arguments by value and not by reference, the value of count is not changed after the first two calls of increment(). Only in the final expression, where count is re-assigned explicitly, does the value of count change.\n\n\nR you functional?\nNow that you’ve acquired some skills in defining functions with different types of arguments and return values, you should try to create more advanced functions. As you’ve noticed in the previous exercises, it’s perfectly possible to add control-flow constructs, loops and even other functions to your function body.\nRemember our social media example? The vectors linkedin and facebook are already defined in the workspace so you can get your hands dirty straight away. As a first step, you will be writing a function that can interpret a single value of this vector. In the next exercise, you will write another function that can handle an entire vector at once.\n\nlinkedin &lt;- c(16, 9, 13, 5, 2, 17, 14)\nfacebook &lt;- c(17, 7, 5, 16, 8, 13, 14)\n\n\n\n\n\n\n\nExercise: Define the interpret function\n\n\n\n\nFinish the function definition for interpret(), that interprets the number of profile views on a single day:\nThe function takes one argument, num_views.\nIf num_views is greater than 15, the function prints out “You’re popular!” to the console and returns num_views.\nElse, the function prints out “Try to be more visible!” and returns 0.\nFinally, call the interpret() function twice: on the first value of the linkedin vector and on the second element of the facebook vector.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\n\ninterpret &lt;- function(num_views) {\n  if (num_views &gt; 15) {\n    print(\"You're popular!\")\n    return(num_views)\n  } else {\n    print(\"Try to be more visible!\")\n    return(0)\n  }\n}\n\n# Call the interpret function twice\ninterpret(linkedin[1])\ninterpret(facebook[2])\ninterpret &lt;- function(num_views) {\n  if (num_views &gt; 15) {\n    print(\"You're popular!\")\n    return(num_views)\n  } else {\n    print(\"Try to be more visible!\")\n    return(0)\n  }\n}\n\n# Call the interpret function twice\ninterpret(linkedin[1])\ninterpret(facebook[2])\n\n\n\n\n\n\n\n\n\n\n\n\n\nR you functional? Inception-style!\nA possible implementation of the interpret() function is already available in the editor. In this exercise you’ll be writing another function that will use the interpret() function to interpret all the data from your daily profile views inside a vector. Furthermore, your function will return the sum of views on popular days, if asked for. A for loop is ideal for iterating over all the vector elements. The ability to return the sum of views on popular days is something you can code through a function argument with a default value.\nAs before, the linkedin and facebook vectors are available to you.\n\nlinkedin &lt;- c(16, 9, 13, 5, 2, 17, 14)\nfacebook &lt;- c(17, 7, 5, 16, 8, 13, 14)\n\n\n\n\n\n\n\nExercise 1: Define the interpret_all() function\n\n\n\nFinish the template for the interpret_all() function:\n\nMake return_sum an optional argument, that is TRUE by default.\nInside the for loop, iterate over all views: on every iteration, add the result of interpret(v) to count. Remember that interpret(v) returns v for popular days, and 0 otherwise. At the same time, interpret(v) will also do some printouts.\nCreate an if construct so that if return_sum is TRUE, return count and else, return NULL.\n\nCall this newly defined function on both linkedin and facebook.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\n\ninterpret &lt;- function(num_views) {\n  if (num_views &gt; 15) {\n    print(\"You're popular!\")\n    return(num_views)\n  } else {\n    print(\"Try to be more visible!\")\n    return(0)\n  }\n}\n\n# Define the interpret_all() function\n# views: vector with data to interpret\n# return_sum: return total number of views on popular days?\ninterpret_all &lt;- function(views, return_sum = TRUE) {\n  count &lt;- 0\n\n  for (v in views) {\n    count &lt;- count + interpret(v)\n  }\n\n  # Insert if-else statement on the next line\n  if (return_sum == TRUE) {\n    return(count)\n  } else {\n    return(NULL)\n  }\n}\n\n# Call the interpret_all() function on both linkedin and facebook\ninterpret_all(linkedin)\ninterpret_all(facebook)\ninterpret &lt;- function(num_views) {\n  if (num_views &gt; 15) {\n    print(\"You're popular!\")\n    return(num_views)\n  } else {\n    print(\"Try to be more visible!\")\n    return(0)\n  }\n}\n\n# Define the interpret_all() function\n# views: vector with data to interpret\n# return_sum: return total number of views on popular days?\ninterpret_all &lt;- function(views, return_sum = TRUE) {\n  count &lt;- 0\n\n  for (v in views) {\n    count &lt;- count + interpret(v)\n  }\n\n  # Insert if-else statement on the next line\n  if (return_sum == TRUE) {\n    return(count)\n  } else {\n    return(NULL)\n  }\n}\n\n# Call the interpret_all() function on both linkedin and facebook\ninterpret_all(linkedin)\ninterpret_all(facebook)\n\n\n\n\n\n\n\n\n\n\n\n\n\nAre R functions black boxes?\nSometimes functions can be referred to as “black boxes” when you use them but are unable to see their code. A very useful thing to know in R is that for many functions you can easily see their code by calling the print function with the function name of interest. For example:\n\nprint(sd)\n\nfunction (x, na.rm = FALSE) \nsqrt(var(if (is.vector(x) || is.factor(x)) x else as.double(x), \n    na.rm = na.rm))\n&lt;bytecode: 0x7f7a8c157178&gt;\n&lt;environment: namespace:stats&gt;\n\n\nTry it now!\n\n\n\n\n\n\nExercise: Peeking into function code\n\n\n\nThe interpret and interpret_all functions from the previous exercise are loaded in memory. Use the print command to show their code!\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\n\nprint(interpret)\nprint(interpret_all)\nprint(interpret)\nprint(interpret_all)\n\n\n\n\n\n\n\n\n\n\nFunctions really are variables!\nTo drive home the point that functions really are variables (i.e. they are variables with data type “function”), we will revisit a rather embarrassing point in American history known as the Indiana Pi Bill. Here’s how the Wikipedia article describes it:\n\nThe Indiana Pi Bill is the popular name for bill #246 of the 1897 sitting of the Indiana General Assembly, one of the most notorious attempts to establish mathematical truth by legislative fiat.\n\nThe legislation had the title “A Bill for an act introducing a new mathematical truth and offered as a contribution to education to be used only by the State of Indiana free of cost by paying any royalties whatever on the same, provided it is accepted and adopted by the official action of the Legislature of 1897.” In any case, the bill (and the mathematical “alternative facts” that it contained) implied that the value of \\(\\pi\\) was 3.2.\nSuppose we had the following extremely simple function inspired by this lovely story. Rather than using 3.2 for \\(\\pi\\), we’ll round to the nearest hundredth using the very useful signif function.\n\nindiana_pi &lt;- function() {\n  return(signif(pi, digits=3))\n}\n\nRather than re-code the function, let’s rename it to something more appropriate.\n\n\n\n\n\n\nExercise: A round pi\n\n\n\nThe function indiana_pi is already available in your workspace. Assign the function to a new variable named round_to_hundredth and run the function to make sure it “works”.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\n\nround_to_hundredth &lt;- indiana_pi\nround_to_hundredth()\nround_to_hundredth &lt;- indiana_pi\nround_to_hundredth()\n\n\n\n\n\n\n\n\n\n\n\n\n\nLeci n’est pas une pipe\n\n\n\n\n\n\n\n\n\nThe Treachery of Images is a painting by surrealist painter René Magritte. It was the inspiration (at least in name and design) for one of the most helpful functions/operators in R for data science called the pipe operator and denoted %&gt;%. This operator is included in the R package magrittr, which has the following awesome hex sticker for its package.\n\n\n\n\n\n\n\n\n\nThis operator was so successful that R created its own pipe operator (|&gt;), so the additional magrittr package would not be necessary.\nThe inspiration for a pipe operator comes about when thinking about how much data processing must be done with data: import data, clean data, rename variables, filter observations, select variables, calculate statistics, … If each one of these steps is an R function, where the output of one step becomes the input of another, your code can become quickly unreadable as an onion of function calls, with layer-upon-layer of parenthetical embedded statements.\nHere’s an example using some functions in the tidyverse that we’ll learn more about later. It loads in data, selects certain variables, filters (subsets) the result based on a condition, specifies a grouping categorical variables to compute a statistic over, and finally computes the average of a numerical variable over these specified groups. Note that the last two steps (group_by and summarize) perform similar operations as the tapply operation that you’ve used before. Here’s the code:\n\nlibrary(tidyverse)\n\nsummarize(group_by(filter(select(read_csv(\"data/chap03q14VasopressinVoles.csv\"), c(treatment, percent)), percent &gt;= 50), treatment), mean(percent))\n\n# A tibble: 2 × 2\n  treatment `mean(percent)`\n  &lt;chr&gt;               &lt;dbl&gt;\n1 control              75.8\n2 enhanced             86.3\n\n\nWhat the heck is going on?!?! What a mess. The situation can be improved a bit by some proper formatting of the code (remember, indentations and new lines are your friends - let your code breathe!)\n\nlibrary(tidyverse)\n\nsummarize(\n  group_by(\n    filter(\n      select(\n        read_csv(\"data/chap03q14VasopressinVoles.csv\"), \n        c(treatment, percent)), \n      percent &gt;= 50), \n    treatment), \n  mean(percent)\n)\n\nThat’s a little better. We can more easily see the functions that are being called, but it’s still hard to see which arguments go with which function (percent &gt;= 50 goes with select or filter?) Indentation helps, but still difficult to read. Also, to see the proper order that the functions are called, you have to start in the inside of the “onion” and work your way out. Very confusing! What if we had an operator that matched more our “function box” image?\n\n\n\n\n\n\n\n\n\nWe do! That’s exactly what the pipe operator |&gt; gives us. In the image above, replace the arrows with the pipe operator. The image of a pipe illustrates that data flows through the functions as input and comes out as output. Here’s the same code from above, but now we use the pipe operator.\n\nread_csv(\"data/chap03q14VasopressinVoles.csv\") |&gt;\n  select(c(treatment, percent)) |&gt;\n  filter(percent &gt;= 50) |&gt;\n  group_by(treatment) |&gt;\n  summarize(mean(percent))\n\n# A tibble: 2 × 2\n  treatment `mean(percent)`\n  &lt;chr&gt;               &lt;dbl&gt;\n1 control              75.8\n2 enhanced             86.3\n\n\nSo much easier! Now you can actually read the code from left-to-right (or top-to-bottom), and the function arguments are exactly with the function they belong to.\n“But wait!”, some of you might be saying. “If a function has multiple arguments, how does the pipe operator know which argument to assign the input on the left to??” Great question! The pipe operator will assign the left object (the input) to the first argument of the function on the right of the pipe. As an example, the following two statements are equivalent:\n\n# This command without the pipe...\nfilter(mydata, percent &gt;= 50)\n\n# ...is equivalent to this one with the pipe...\nmydata |&gt; filter(percent &gt;= 50)\n\nFor the following exercise, we will consider Exercise 32 in Chapter 2 of Whitlock & Schluter’s textbook “The Analysis of Biological Data”.\n\nMore than 10% of people carry the parasite Toxoplasma gondhii. The following table gives data from Prague on 15- to 29-year old drivers who had been involved in an accident. The table gives the number of drivers who were infected with Toxoplasma gondhii and who were uninfected. These numbers are compared with a control sample of 249 drivers of the same age living in the same area who had not been in an accident.\n\n\n\n           infectionStatus\ndriverType  infected uninfected\n  accidents       21         38\n  control         38        211\n\n\n\n\n\n\n\n\nExercise 1: I love mosaic plots!\n\n\n\n\nFirst, use read.csv to load in the data located at data/chap02q32ToxoplasmaAccidents.csv and store in the variable toxoData.\nNext, use the table command to recreate the table above and store the result in the variable toxoTable.\nFinally, use the mosaicplot command with toxoTable as the argument to create a mosaic plot.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\n\ntoxoData &lt;- read.csv(\"data/chap02q32ToxoplasmaAccidents.csv\")\ntoxoTable &lt;- table(toxoData)\nmosaicplot(toxoTable)\ntoxoData &lt;- read.csv(\"data/chap02q32ToxoplasmaAccidents.csv\")\ntoxoTable &lt;- table(toxoData)\nmosaicplot(toxoTable)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nExercise 2: I love mosaic plots with pipes!\n\n\n\nUse the pipe operator below to perform the same operations as Exercise 1.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\n\nread.csv(\"data/chap02q32ToxoplasmaAccidents.csv\") %&gt;%\n  table() %&gt;%\n  mosaicplot()\nread.csv(\"data/chap02q32ToxoplasmaAccidents.csv\") %&gt;%\n  table() %&gt;%\n  mosaicplot()\n\n\n\n\n\n\n\n\n\n\n\n\n\nCongratulations! You have finished Chapter 3!\nYou have finished the chapter “Functions”!"
  }
]